{"version":3,"sources":["FilterNames/FilterName.js","serviceWorker.js","Metric/fakeAPI.js","Metric/metric.js","AboutUs/AboutUs.js","UserDetail/UserDetail.js","Context/Context.js","Map/Map.js","HomePage/HomePage.js","NavBar/NavBar.js","index.js"],"names":["names","namesList","people","name","age","scores","str","FilterName","props","className","Row","filter","includes","match","map","nameIndividual","Col","filteredName","key","nm","filternume","person","oldAge","reduce","previousScore","currentScore","id","placeholder","onChange","evt","userInput","document","getElementById","value","textContent","handleChange","Boolean","window","location","hostname","wrapPromise","promise","result","status","suspender","then","r","e","read","resource","userPromise","console","log","Promise","resolve","setTimeout","postsPromise","text","user","posts","fetchProfileData","ProfilePage","fallback","ProfileDetails","ProfileTimeline","post","AboutUs","UserDetail","useState","userDetailsJSON","setUserDetailsJSON","useEffect","axios","get","response","JSON","stringify","catch","err","randomData","ThemeContext","React","createContext","Toolbar","ThemedButton","contextType","Button","theme","variant","Context","Provider","memo","setTooltipContent","data-tip","projectionConfig","scale","geography","geographies","geo","rsmKey","onMouseEnter","num","properties","NAME","POP_EST","Math","round","onMouseLeave","style","default","fill","outline","hover","pressed","HomePage","heading","setHeading","setContent","onClick","Map","NavBar","Image","src","alt","Nav","onSelect","selectedKey","alert","Item","Link","href","title","ReactDOM","render","basename","process","path","component","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.acdc941e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport \"../index.scss\";\r\n\r\nconst names = [\"Mitul\", \"Kirti\", \"Mk\", \"Mitali\", \"Michel\"];\r\nlet namesList = [1, 2, 6, 7, 9];\r\nconst people = [\r\n  {\r\n    name: \"James\",\r\n    age: 61,\r\n  },\r\n  {\r\n    name: \"John\",\r\n    age: 45,\r\n  },\r\n  {\r\n    name: \"Paul\",\r\n    age: 65,\r\n  },\r\n  {\r\n    name: \"Ringo\",\r\n    age: 49,\r\n  },\r\n  {\r\n    name: \"George\",\r\n    age: 34,\r\n  },\r\n];\r\nconst scores = [100, 200, 300, 400, 500];\r\n\r\nlet str = ['Apple', 'Orange', 'Plan', 'Python', 'Money'];\r\n//from this array you need to extract the values that contains at least 2 vowels\r\nlet vowelArr = ['a','e','i','o','u'];\r\n\r\nconst FilterName = (props) => {\r\n  const handleChange = (evt) => {\r\n    let userInput = document.getElementById(\"todoInput\").value;\r\n    document.getElementById(\"displayList\").textContent = userInput;\r\n    return <div>{userInput}</div>;\r\n  };\r\n  const vowelsCounter = (strVal) => {\r\n    // Search text with Regex and store all matching instances \r\n    let matchingInstances = strVal.match(/[aeiou]/gi);\r\n    // Check if matching instances exist then calculate length\r\n    if (matchingInstances.split(',').length == 2) {    \r\n        // Return number of vowels\r\n        return strVal;\r\n    } else {\r\n        return 0\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"name-list\">\r\n      <Row>\r\n      {/* {vowelsCounter(str.toString())} */}\r\n      {str.filter((name) => name.includes(name.match(/[aeiou]/gi)))\r\n      .map((nameIndividual) => {\r\n            return (\r\n              <>\r\n            <li> {nameIndividual} </li>\r\n            </>\r\n            )\r\n          })}\r\n      </Row>\r\n      <Row>\r\n        {/* Program to display names list normally */}\r\n        <strong>Display list</strong>\r\n        <Col>\r\n          {names.map((nameIndividual) => {\r\n            return <li>{nameIndividual}</li>;\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      {/* Program to display names object normally\r\n      <strong>Display object</strong>\r\n      {people.map((peo) => (\r\n        <>\r\n          <li>{peo.name}</li>\r\n          <li>{peo.age}</li>\r\n        </>\r\n      ))} */}\r\n      <Row>\r\n        {/* Program to filter out the names from the names list starting with 'Mi' */}\r\n        <strong>Names starting with 'Mi' :</strong>\r\n        <Col>\r\n          {names\r\n            .filter((name) => name.includes(\"Mi\"))\r\n            .map((filteredName) => (\r\n              <li key={filteredName}> {filteredName}</li>\r\n            ))}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <strong>Numbers greater than 5 :</strong>\r\n        <Col>\r\n          {namesList\r\n            .filter((nm) => nm > 5)\r\n            .map((filternume) => (\r\n              <li key={filternume}> {filternume}</li>\r\n            ))}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {/* Program to filter out the names from the names list having more than 60yrs of age */}\r\n        <strong>People above 60 years of age :</strong>\r\n        <Col>\r\n          {people\r\n            .filter((person) => person.age > 60)\r\n            .map((oldAge) => (\r\n              <li key={oldAge}> {oldAge.name}</li>\r\n            ))}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {/* Program to use reduce function */}\r\n        <strong>\r\n          Program to use reduce function :\r\n          <Col>\r\n            {scores.reduce(\r\n              (previousScore, currentScore) => previousScore + currentScore,\r\n              0\r\n            )}\r\n          </Col>\r\n        </strong>\r\n      </Row>\r\n      <Row>\r\n        {/* Program to display the value entered in an input tag */}\r\n        <input\r\n          id=\"todoInput\"\r\n          placeholder=\"Type a text\"\r\n          className=\"text-box-filter-component\"\r\n          onChange={(evt) => {\r\n            handleChange();\r\n          }}\r\n        />\r\n      </Row>\r\n      <div id=\"displayList\"></div>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\nexport default FilterName;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function fetchProfileData() {\r\n    let userPromise = fetchUser();\r\n    let postsPromise = fetchPosts();\r\n    return {\r\n      user: wrapPromise(userPromise),\r\n      posts: wrapPromise(postsPromise)\r\n    };\r\n  }\r\n  \r\n  // Suspense integrations like Relay implement\r\n  // a contract like this to integrate with React.\r\n  // Real implementations can be significantly more complex.\r\n  // Don't copy-paste this into your project!\r\n  function wrapPromise(promise) {\r\n    let status = \"pending\";\r\n    let result;\r\n    let suspender = promise.then(\r\n      r => {\r\n        status = \"success\";\r\n        result = r;\r\n      },\r\n      e => {\r\n        status = \"error\";\r\n        result = e;\r\n      }\r\n    );\r\n    return {\r\n      read() {\r\n        if (status === \"pending\") {\r\n          throw suspender;\r\n        } else if (status === \"error\") {\r\n          throw result;\r\n        } else if (status === \"success\") {\r\n          return result;\r\n        }\r\n      }\r\n    };\r\n  }\r\n  \r\n  function fetchUser() {\r\n    console.log(\"fetch user...\");\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        console.log(\"fetched user\");\r\n        resolve({\r\n          name: \"Mitul Kirti\"\r\n        });\r\n      }, 1000);\r\n    });\r\n  }\r\n  \r\n  function fetchPosts() {\r\n    console.log(\"fetch posts...\");\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        console.log(\"fetched posts\");\r\n        resolve([\r\n          {\r\n            id: 0,\r\n            text:\r\n              \"Software consultant with 5.10 years of experience.\"\r\n          },\r\n          {\r\n            id: 1,\r\n            text:\r\n              \"Youtuber\"\r\n          },\r\n          {\r\n            id: 2,\r\n            text:\r\n              \"Loves creativity\"\r\n          }\r\n        ]);\r\n      }, 2000);\r\n    });\r\n  }\r\n  ","import React, { Suspense } from \"react\";\r\nimport { fetchProfileData } from \"./fakeAPI\";\r\n\r\nconst resource = fetchProfileData();\r\n\r\nexport default function ProfilePage() {\r\n  return (\r\n    <Suspense fallback={<h1>Loading profile...</h1>}>\r\n      <ProfileDetails />\r\n      <Suspense fallback={<h1>Loading information...</h1>}>\r\n        <ProfileTimeline />\r\n      </Suspense>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nfunction ProfileDetails() {\r\n  // Try to read user info, although it might not have loaded yet\r\n  const user = resource.user.read();\r\n  return <h1>{user.name}</h1>;\r\n}\r\n\r\nfunction ProfileTimeline() {\r\n  // Try to read posts, although they might not have loaded yet\r\n  const posts = resource.posts.read();\r\n  return (\r\n    <ul>\r\n      {posts.map((post) => (\r\n        <li key={post.id}>{post.text}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Metric from '../Metric/metric';\r\nimport '../index.scss';\r\n\r\nconst AboutUs = () => {\r\n  return <div className=\"name-list\">\r\n    <Metric />\r\n    </div>;\r\n};\r\nexport default AboutUs;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../index.scss\";\r\n\r\nconst getDetails = () => {\r\n  return axios\r\n    .get(\"https://randomuser.me/api\")\r\n    .then((response) => {\r\n      return JSON.stringify(response);\r\n    })\r\n    .catch((err) => {\r\n      return err;\r\n    });\r\n};\r\n\r\nconst UserDetail = () => {\r\n  const [userDetailsJSON, setUserDetailsJSON] = useState(\"\");\r\n  useEffect(() => {\r\n    getDetails().then((randomData) => {\r\n      setUserDetailsJSON(randomData || \"No data found\");\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <p className=\"title-name\">\r\n        Calling an API to display random data on the UI.\r\n      </p>\r\n      <pre>{userDetailsJSON}</pre>\r\n    </>\r\n  );\r\n};\r\nexport default UserDetail;\r\n","// Context lets us pass a value deep into the component tree\r\n// without explicitly threading it through every component.\r\n// Create a context for the current theme (with 'light' as the default).\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nconst ThemeContext = React.createContext('light');\r\n\r\nconst Context = () => {\r\n    // Use a Provider to pass the current theme to the tree below.\r\n    // Any component can read it, no matter how deep it is.\r\n    // In this example, we're passing 'dark' as the current value.\r\n    return (\r\n      <ThemeContext.Provider value='dark'>\r\n        <Toolbar />\r\n      </ThemeContext.Provider>\r\n    );\r\n}\r\n\r\n// A component in the middle doesn't have to\r\n// pass the theme down explicitly anymore.\r\nlet Toolbar =() => {\r\n  return (\r\n    <div>\r\n      <ThemedButton />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ThemedButton =() => {\r\n  // Assign a contextType to read the current theme context.\r\n  // React will find the closest theme Provider above and use its value.\r\n  // In this example, the current theme is 'dark'.\r\n  const contextType = ThemeContext;\r\n    return <Button theme={contextType} variant='outline-success'className='title-btn' > Context in React is a good concept </Button>;\r\n  }\r\n  export default Context;","import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst rounded = num => {\r\n  if (num > 1000000000) {\r\n    return Math.round(num / 100000000) / 10 + \"Bn\";\r\n  } else if (num > 1000000) {\r\n    return Math.round(num / 100000) / 10 + \"M\";\r\n  } else {\r\n    return Math.round(num / 100) / 10 + \"K\";\r\n  }\r\n};\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, POP_EST } = geo.properties;\r\n                    setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"#0097a9\",\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#018786\",                      \r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#FFFFFF\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"./HomePage.scss\";\r\nimport Map from \"../Map/Map\";\r\n\r\nconst HomePage = (props) => {\r\n  const [heading, setHeading] = useState(props.heading);\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <p className=\"title-name\"> {heading}</p>\r\n      <Button\r\n        onClick={() => setHeading(\"Title reset\")}\r\n        variant=\"outline-success\"\r\n        className=\"title-btn\"\r\n      >\r\n        Click here to reset the title!\r\n      </Button>\r\n      <article className=\"title-name\">\r\n        Calling Map Component from Home Component to display a react-simple-map\r\n        below:\r\n      </article>\r\n      <Map setTooltipContent={setContent} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport {Row, Nav, Image} from 'react-bootstrap';\r\nimport './NavBar.scss';\r\n\r\nconst NavBar = (props) => {\r\n    return (\r\n      <>\r\n      <Row>\r\n          <Image\r\n            src='../assets/nature-images.jpg'\r\n            alt='nature'\r\n            className='nature-img'\r\n          />\r\n        <Nav\r\n        fill\r\n        variant='pills'\r\n        className='nav-bar'\r\n        onSelect={(selectedKey) => alert(`selected ${selectedKey}`)}\r\n      >\r\n        <Nav.Item>\r\n          <Nav.Link href='/app'>Home</Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link href='/about'>About</Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link href='/filterName'>Names</Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link href='/userDetail'>User Details</Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link href='/context'>Context</Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n      </Row>\r\n      <Row>\r\n      <strong className='title-intro'>{props.title}</strong>\r\n      </Row>\r\n      </>\r\n    );\r\n}\r\nexport default NavBar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport FilterName from './FilterNames/FilterName';\nimport * as serviceWorker from './serviceWorker';\nimport AboutUs from './AboutUs/AboutUs';\nimport UserDetail from '../src/UserDetail/UserDetail';\nimport './index.scss';\nimport Context from './Context/Context';\nimport HomePage from './HomePage/HomePage';\nimport NavBar from './NavBar/NavBar';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <div className='App'>\n      <Route path='/' component={NavBar} component={() => <NavBar title=\"Welcome to Mitul's ReactJS Tutorial.Click on the links above to see a demo.\"/>}/>\n      <Route path='/app' component={HomePage}  component={() => <HomePage heading='Go Green' />}/>\n        <Route path='/about' component={AboutUs} />\n        <Route path='/filterName' component={FilterName} />\n        <Route path='/userDetail' component={UserDetail} />\n        <Route path='/context' component={Context} />\n    </div>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n//Service workers are the foundation of building an offline experience.\n//They enable features such as push notifications and background sync.\n"],"sourceRoot":""}